library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use IEEE.NUMERIC_STD.ALL;

entity ProductSelector is
    Port (
        clk         : in STD_LOGIC;                   -- Reloj de 100 MHz
        reset       : in STD_LOGIC;                   -- Reset
        sw_select   : in STD_LOGIC_VECTOR(4 downto 0); -- Selección de producto
        seg_display : out STD_LOGIC_VECTOR(6 downto 0); -- Display de 7 segmentos
        anode       : out STD_LOGIC_VECTOR(3 downto 0); -- Control de anodos
        price       : out INTEGER                     -- Precio del producto seleccionado
    );
end ProductSelector;

architecture Behavioral of ProductSelector is
    signal price_internal : INTEGER := 0;             -- Precio interno del producto
    signal decenas, unidades : INTEGER := 0;          -- Valores separados
    signal clk_divider  : STD_LOGIC := '0';           -- Divisor de reloj
    signal digit_sel    : STD_LOGIC := '0';           -- Selección de dígito
    signal count        : INTEGER := 0;              -- Contador para divisor
    constant DIVISOR    : INTEGER := 100000;          -- Divisor para multiplexado
begin

    -- Proceso para generar un reloj lento (1 kHz) para multiplexado
    process(clk)
    begin
        if rising_edge(clk) then
            if count = DIVISOR - 1 then
                count <= 0;
                clk_divider <= not clk_divider;
            else
                count <= count + 1;
            end if;
        end if;
    end process;

    -- Proceso para determinar el precio según el switch seleccionado
    process(sw_select, reset)
    begin
        if reset = '1' then
            price_internal <= 0;
        else
            case sw_select is
                when "00001" => price_internal <= 10; -- Producto 1
                when "00010" => price_internal <= 18; -- Producto 2
                when "00100" => price_internal <= 24; -- Producto 3
                when "01000" => price_internal <= 30; -- Producto 4
                when "10000" => price_internal <= 35; -- Producto 5
                when others  => price_internal <= 0;  -- Ningún producto seleccionado
            end case;
        end if;
    end process;

    -- Asignar el precio interno al puerto de salida
    price <= price_internal;

    -- Proceso para separar decenas y unidades
    process(price_internal)
    begin
        decenas <= price_internal / 10;
        unidades <= price_internal mod 10;
    end process;

    -- Proceso para multiplexar el display
    process(clk_divider)
    begin
        if rising_edge(clk_divider) then
            digit_sel <= not digit_sel; -- Alterna entre decenas y unidades
        end if;
    end process;

    -- Proceso para mostrar los valores en el display de 7 segmentos
    process(digit_sel, decenas, unidades, price_internal)
    begin
        if price_internal = 0 then
            -- Mostrar "0" en ambos dígitos al inicio o si no hay selección
            seg_display <= "1000000"; -- Patrón para "0" en 7 segmentos
            if digit_sel = '0' then
                anode <= "0111"; -- Activar dígito más a la izquierda (decenas)
            else
                anode <= "1011"; -- Activar siguiente dígito a la izquierda (unidades)
            end if;
        else
            -- Mostrar el valor real de las decenas y unidades
            if digit_sel = '0' then
                -- Mostrar unidades
                case unidades is
                    when 0 => seg_display <= "1000000"; -- 0
                    when 1 => seg_display <= "1111001"; -- 1
                    when 2 => seg_display <= "0100100"; -- 2
                    when 3 => seg_display <= "0110000"; -- 3
                    when 4 => seg_display <= "0011001"; -- 4
                    when 5 => seg_display <= "0010010"; -- 5
                    when 6 => seg_display <= "0000010"; -- 6
                    when 7 => seg_display <= "1111000"; -- 7
                    when 8 => seg_display <= "0000000"; -- 8
                    when 9 => seg_display <= "0010000"; -- 9
                    when others => seg_display <= "1111111"; -- Error
                end case;
                anode <= "1011"; -- Activar dígito a la izquierda (unidades)
            else
                -- Mostrar decenas
                case decenas is
                    when 0 => seg_display <= "1000000"; -- 0
                    when 1 => seg_display <= "1111001"; -- 1
                    when 2 => seg_display <= "0100100"; -- 2
                    when 3 => seg_display <= "0110000"; -- 3
                    when 4 => seg_display <= "0011001"; -- 4
                    when 5 => seg_display <= "0010010"; -- 5
                    when 6 => seg_display <= "0000010"; -- 6
                    when 7 => seg_display <= "1111000"; -- 7
                    when 8 => seg_display <= "0000000"; -- 8
                    when 9 => seg_display <= "0010000"; -- 9
                    when others => seg_display <= "1111111"; -- Error
                end case;
                anode <= "0111"; -- Activar dígito más a la izquierda (decenas)
            end if;
        end if;
    end process;

end Behavioral;
